/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package soccer;

import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class Tournament extends javax.swing.JFrame {
    
    String[] COLUMNS = {"Team", "Wins", "Loses","Ties"};
    String[] COLUMNS2 = {"Team", "Result"};
    String[] COLUMNS3 = {"Team", "Points"};
    private ArrayList<Team> Teams;
    
    /**
     * Creates new form Tournament
     */
    public Tournament() {
        initComponents();
        initObjects();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Tab = new javax.swing.JTabbedPane();
        TablePanel = new javax.swing.JScrollPane();
        TeamsTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        Team1 = new javax.swing.JComboBox<>();
        Team2 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        SaveMatch = new javax.swing.JButton();
        State = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        TeamSelected = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        TeamMatches = new javax.swing.JTable();
        TeamPoints = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablePodium = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TablePanel.setEnabled(false);

        TeamsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablePanel.setViewportView(TeamsTable);

        Tab.addTab("Table", TablePanel);

        Team1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Team1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Team1ActionPerformed(evt);
            }
        });

        Team2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        Team2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Team2ActionPerformed(evt);
            }
        });

        jLabel1.setText("Vs");

        SaveMatch.setText("SaveMatch");
        SaveMatch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveMatchActionPerformed(evt);
            }
        });

        State.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Team 1 win", "Team 2 win", "Tie" }));
        State.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StateActionPerformed(evt);
            }
        });

        jLabel2.setText("Team 1");

        jLabel3.setText("Team 2");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(94, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jLabel2)
                        .addGap(148, 148, 148)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Team1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(Team2, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(State, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(SaveMatch)))
                .addGap(84, 84, 84))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Team1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Team2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(State, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(SaveMatch)
                .addContainerGap(171, Short.MAX_VALUE))
        );

        Tab.addTab("Matches", jPanel1);

        TeamSelected.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Team 1", "Team 2", "Team 3", "Team 4", "Team 5", "Team 6", "Team 7", "Team 8", "Team 9" }));
        TeamSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TeamSelectedActionPerformed(evt);
            }
        });

        TeamMatches.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Team", "Result"
            }
        ));
        jScrollPane1.setViewportView(TeamMatches);

        TeamPoints.setText("Total points:");
        TeamPoints.setToolTipText("");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(TeamSelected, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addComponent(TeamPoints, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(132, 132, 132))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TeamSelected, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TeamPoints))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                .addContainerGap())
        );

        Tab.addTab("Team", jPanel2);

        TablePodium.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Team", "Points"
            }
        ));
        TablePodium.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                TablePodiumFocusGained(evt);
            }
        });
        jScrollPane2.setViewportView(TablePodium);

        Tab.addTab("Podium", jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Tab)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Tab, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void StateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_StateActionPerformed

    private void SaveMatchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveMatchActionPerformed
        // TODO add your handling code here:
        switch (State.getSelectedIndex()){
            case 0 -> {
                Teams.get(CurrentTeam1).play(3,Teams.get(CurrentTeam2));
                Teams.get(CurrentTeam2).play(0,Teams.get(CurrentTeam1));
                break;
            }
            case 1 -> {
                Teams.get(CurrentTeam1).play(0,Teams.get(CurrentTeam2));
                Teams.get(CurrentTeam2).play(3,Teams.get(CurrentTeam1));
                break;
            }
            case 2 -> {
                Teams.get(CurrentTeam1).play(1,Teams.get(CurrentTeam2));
                Teams.get(CurrentTeam2).play(1,Teams.get(CurrentTeam1));
                break;
            }
        }
        bob();
    }//GEN-LAST:event_SaveMatchActionPerformed
int CurrentTeam2;
    private void Team2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Team2ActionPerformed
        // TODO add your handling code here:
        CurrentTeam2 = currentTeam(Team2.getSelectedItem().toString());
        Team1.setModel(new javax.swing.DefaultComboBoxModel<>(withoutE(getNames(Teams),CurrentTeam2)));
        if (CurrentTeam1>CurrentTeam2){
            Team1.setSelectedIndex(CurrentTeam1-1);
        } else{
            Team1.setSelectedIndex(CurrentTeam1);
        }
    }//GEN-LAST:event_Team2ActionPerformed
int CurrentTeam1;
    private void Team1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Team1ActionPerformed
        // TODO add your handling code here:
        CurrentTeam1 = currentTeam(Team1.getSelectedItem().toString());
        Team2.setModel(new javax.swing.DefaultComboBoxModel<>(withoutE(getNames(Teams),CurrentTeam1)));
        if (CurrentTeam2>CurrentTeam1){
            Team2.setSelectedIndex(CurrentTeam2-1);
        } else{
            Team2.setSelectedIndex(CurrentTeam2);
        }
    }//GEN-LAST:event_Team1ActionPerformed

    private void TeamSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TeamSelectedActionPerformed
        // TODO add your handling code here:
        Team team = Teams.get(TeamSelected.getSelectedIndex());
        
        String[][] data = new String[team.getPoints().size()][2];
        for (int i=0;i<team.getPoints().size();i++){
            data[i][0] = team.getMatches().get(i).getName();
            switch (team.getPoints().get(i)){
                case 3:
                    data[i][1] = "Win";
                    break;
                case 1:
                    data[i][1] = "Tie";
                    break;
                case 0:
                    data[i][1] = "Lose";
                    break;
            }
        }
        DefaultTableModel tableModel = new DefaultTableModel(data, COLUMNS2) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        TeamMatches.setModel(tableModel);
        
        int points = 0;
        for (int i:team.getPoints()){
            points = points+i;
        }
        TeamPoints.setText("Total points: "+points);
    }//GEN-LAST:event_TeamSelectedActionPerformed

    private void TablePodiumFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_TablePodiumFocusGained
        // TODO add your handling code here:
        Team[] Podium = getPodium();
        String[][] data = new String[Teams.size()][2];
        
        for (int i=0;i<Podium.length;i++){
            data[i][0] = Podium[i].getName();
            int c = 0;
            for (int j:Podium[i].getPoints()){
                c = c+j;
            }
            data[i][1] = c+"";
        }
        
        DefaultTableModel tableModel = new DefaultTableModel(data, COLUMNS3) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        TablePodium.setModel(tableModel);
    }//GEN-LAST:event_TablePodiumFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tournament.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tournament.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tournament.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tournament.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tournament().setVisible(true);
            }
        });
    }
    
    private void initObjects() {
        
        Teams = new ArrayList<>();
        String[][] data = new String[20][4];
        
        String[] ColombianTeams = {
            "Aguilas Doradas",
            "Alianza Petrolera",
            "America",
            "Atelitico Nacional",
            "Boyaca Chico",
            "Bucaramanga",
            "Deportivo Cali",
            "Deportivo Pereira",
            "Envigado",
            "Fortaleza",
            "Jaguares",
            "Junior",
            "La Equidad",
            "Medellin",
            "Millonarios",
            "Once Caldas",
            "Pasto",
            "Patriotas",
            "Santa Fe",
            "Tolima"
        };
        
        for (int i=0;i<20;i++){
            Team a = new Team(ColombianTeams[i]);
            Teams.add(a);
            data[i][0] = a.getName();
            data[i][1] = "0";
            data[i][2] = "0";
            data[i][3] = "0";
        };
        
        TeamSelected.setModel(new javax.swing.DefaultComboBoxModel<>(ColombianTeams));
        CurrentTeam1 = 0;
        Team2.setModel(new javax.swing.DefaultComboBoxModel<>(withoutE(getNames(Teams),CurrentTeam1)));
        CurrentTeam2 = 1;
        Team1.setModel(new javax.swing.DefaultComboBoxModel<>(withoutE(getNames(Teams),CurrentTeam2)));
        
        DefaultTableModel tableModel = new DefaultTableModel(data, COLUMNS) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        TeamsTable.setModel(tableModel);
    }
    
    public void bob(){
        String[][] data = new String[Teams.size()][4];
        
        Team a;
        
        for (int i=0;i<Teams.size();i++){
            a = Teams.get(i);
            data[i][0] = a.getName();
            data[i][1] = "0";
            data[i][2] = "0";
            data[i][3] = "0";
            for (int j:a.getPoints()){
                switch (j){
                    case 3:
                        data[i][1] = (Integer.parseInt(data[i][1])+1)+"";
                        break;
                    case 0:
                        data[i][2] = (Integer.parseInt(data[i][2])+1)+"";
                        break;
                    case 1:
                        data[i][3] = (Integer.parseInt(data[i][3])+1)+"";
                        break;
                }
            }
        }
        DefaultTableModel tableModel = new DefaultTableModel(data, COLUMNS) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        TeamsTable.setModel(tableModel);
    }
    
    public String[] withoutE(ArrayList<String> array,int e){
        String[] result = new String[array.size()-2];
        int c = 0;
        for (int i=0;i<array.size()-1;i++){
            if (i!=e){
                result[c] = array.get(i);
                c++;
            }
        }
        return result;
    }
    
    public ArrayList<String> getNames(ArrayList<Team> array){
        ArrayList<String> result = new ArrayList<>();
        for (Team i:array){
            result.add(i.getName());
        }
        return result;
    }
    
    public int currentTeam(String team){
        int c = 0;
        for (Team i:Teams){
            if (i.getName() == team){
                return c;
            }
            c++;
        }
        return 0;
    }
    
    public Team[] getPodium(){
        Team[] Podium = new Team[Teams.size()];
        ArrayList<Team> Copy = (ArrayList<Team>)Teams.clone();
        for (int i=0;i<Teams.size();i++){
            int m = -1;
            Team great = null;
            for (Team j:Copy){
                int c = 0;
                for (int k:j.getPoints()){
                    c = c+k;
                }
                if (c>m){
                    m = c;
                    great = j;
                }
            }
            Podium[i] = great;
            Copy.remove(great);
        }
        return Podium;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SaveMatch;
    private javax.swing.JComboBox<String> State;
    public javax.swing.JTabbedPane Tab;
    private javax.swing.JScrollPane TablePanel;
    private javax.swing.JTable TablePodium;
    private javax.swing.JComboBox<String> Team1;
    private javax.swing.JComboBox<String> Team2;
    private javax.swing.JTable TeamMatches;
    private javax.swing.JLabel TeamPoints;
    private javax.swing.JComboBox<String> TeamSelected;
    private javax.swing.JTable TeamsTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
